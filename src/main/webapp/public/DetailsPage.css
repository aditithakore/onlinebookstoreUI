@charset "ISO-8859-1";
:root {
  --primary-color: #595959;
  --secondary-color: #808F85;
  --accent-color: #91C499;
  --background-color: #F2E9DC;
  --text-color: #CFD11A;
}

body{
	background-color: var(--background-color);
}
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}


Sure, you can achieve a similar layout using CSS flexbox instead of grid. Here's an example:
htmlCopy code<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Book Description</title>
  <style>
    .maindiv {
      display: flex;
      flex-wrap: wrap;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    .image {
      flex: 1;
      margin-right: 20px;
    }

    .content {
      flex: 2;
    }

    .description {
      font-weight: bold;
      font-size: 1.2rem;
      margin-bottom: 10px;
    }

    .buttons {
      display: flex;
      gap: 10px;
    }
    
        img {
      max-width: 100%;
      height: auto;
    }